# e2e-actions
#
# When adding new e2e apps that require compilation (such as a new Rust test app) you have to add
# the building step here.
#
# For Rust apps, we have a little script (see # Build Rust test apps) that loops through the
# existing directories doing a `cargo build`.
#
# Be very careful when adding new build steps, as they have an impact on every other PR in 
# the `mirrord` repo.
#
# If you add a new build step, say to compile a Go program, but the code for this program is only
# in your PR, then all other PRs will start failing, as they lack yours.
#
# The best way to add new build steps here is to either do something similar to what's being done
# for Rust, or to do it as a conditional build, first checking if the directory/code exists before
# calling a compiler.
name: 'Setup mirrord e2e environment'
description: 'Install all required dependencies for mirrord e2e tests'
inputs:
  container-runtime:
    description: 'Container runtime to setup with minikube'
    default: 'containerd'
runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v3
      with:
        node-version: 24
    - run: npm install express
      shell: bash
    - uses: actions/setup-python@v3
    - run: pip3 install flask fastapi uvicorn[standard]
      shell: bash
    - uses: actions/setup-go@v3
      with:
        go-version: "1.21"
        cache-dependency-path: tests/go-e2e/go.sum
    - run: |
        go version
      shell: bash
    - run: | # Build Go test apps.
        ./scripts/build_go_apps.sh 21
      shell: bash
    # don't use "cache" for other Gos since it will try to overwrite and have bad results.
    - uses: actions/setup-go@v4
      with:
        go-version: "1.22"
        cache: false
    - run: |
        go version
      shell: bash
    - run: | # Build Go test apps.
        ./scripts/build_go_apps.sh 22
      shell: bash
    - uses: actions/setup-go@v4
      with:
        go-version: "1.23"
        cache: false
    - run: |
        go version
      shell: bash
    - run: | # Build Go test apps.
        ./scripts/build_go_apps.sh 23
      shell: bash
    - name: Build Rust test apps
      run: |
        for cargo_dir in $(find tests/*/* -name Cargo.toml -printf '%h\n'); do
            echo "Building test app in: $cargo_dir"
            pushd "$cargo_dir"
            cargo build
            popd
        done
      shell: bash
    - name: Build C test apps
      run: ./scripts/build_c_apps.sh
      shell: bash
    # start last thing, to have previous steps faster (no cpu in background)
    - name: start minikube
      uses: metalbear-co/setup-minikube@3fa06c2257eb48a3ca8e24fedece59ee2479255a
      with:
        container-runtime: ${{ inputs.container-runtime }}
        cpus: 'max'
        memory: '4gb'
